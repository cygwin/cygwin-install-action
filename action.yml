name: Install Cygwin Action
description: GitHub Action to install Cygwin

inputs:
  platform:
    description: Platform [x86, x86_64]
    required: false
    default: x86_64
  packages:
    description: Packages to install
    required: false
  install-dir:
    # by default, install to C:\cygwin rather than the platform dependent
    # default to make everything simpler
    description: Installation directory
    required: false
    default: C:\cygwin
  check-sig:
    description: Should the setup.ini file signature be checked?
    required: false
    default: 'true'
  pubkeys:
    description: Absolute paths of extra public key files (RFC4880 format), separated by whitespace
    required: false
  site:
    description: Download site URLs separated by whitespace
    required: false
  add-to-path:
    description: Should Cygwin's bin directory be added to the system PATH?
    required: false
    default: 'true'
  allow-test-packages:
    description: Consider package versions marked test
    required: false
    default: 'false'
  check-hash:
    description: Check the hash of the installer
    required: false
    default: 'true'

runs:
  using: "composite"
  steps:
    - run: |
        $ErrorActionPreference = 'Stop'
        $platform = '${{ inputs.platform }}'
        $platform = $platform -replace '^(x64|amd64)$', 'x86_64'
        $platform = $platform -replace '^i686$', 'x86'
        # validate that platform is one of the expected values
        if (($platform -ne 'x86') -and ($platform -ne 'x86_64')) {
          echo "unknown platform $platform"
          exit 1
        }
        $setupFileName = "setup-$platform.exe"
        Invoke-WebRequest "https://cygwin.com/$setupFileName" -OutFile C:\setup.exe
        if ((Get-Item -LiteralPath 'C:\setup.exe').Length -eq 0) {
          throw "The downloaded setup has a zero length!"
        }

        if ('${{ inputs.check-hash }}' -eq 'true') {
          $expectedHashLines = $(Invoke-WebRequest -Uri https://cygwin.com/sha512.sum).ToString() -split "`n"
          $expectedHash = ''
          foreach ($expectedHashLine in $expectedHashLines) {
            if ($expectedHashLine.EndsWith(" $setupFileName")) {
              $expectedHash = $($expectedHashLine -split '\s+')[0]
              break
            }
          }
          if ($expectedHash -eq '') {
            Write-Output -InputObject "::warning::Unable to find the hash for the file $setupFileName in https://cygwin.com/sha512.sum"
          } else {
            $actualHash = $(Get-FileHash -LiteralPath C:\setup.exe -Algorithm SHA512).Hash
            if ($actualHash -ine $expectedHash) {
              throw "Invalid hash of the downloaded setup!`nExpected: $expectedHash`nActual  : $actualHash"
            } else {
              Write-Output -InputObject "The downloaded file has the expected hash ($expectedHash)"
            }
          }
        }

        $packages = '${{ inputs.packages }}'
        $pkg_list = $packages.Split('', [System.StringSplitOptions]::RemoveEmptyEntries)
        $pkg_list = $pkg_list | % { $_.Trim() }
        $pkg_list = $pkg_list | % { $_.Trim(',') }

        $args = @(
         '-qnO',
         '-l', 'C:\cygwin-packages',
         '-R', '${{ inputs.install-dir }}'
        )

        if ( '${{ inputs.allow-test-packages }}' ) {
          $args += '-t' # --allow-test-packages
        }

        # default site if not specified
        if ( '${{ inputs.site }}' ) {
          $sites = '${{ inputs.site }}'
        } elseif ($platform -eq 'x86') {
          $sites = 'http://mirrors.kernel.org/sourceware/cygwin-archive/20221123'
        } else {
          $sites = 'http://mirrors.kernel.org/sourceware/cygwin/'
        }
        $site_list = $sites.Split('', [System.StringSplitOptions]::RemoveEmptyEntries)
        $site_list = $site_list | % { $_.Trim() }
        foreach ($site in $site_list) {
          $args += '-s'
          $args += $site
        }

        if ($pkg_list.Count -gt 0) {
          $args += '-P'
          $args += $pkg_list -Join(',')
        }

        if ('${{ inputs.check-sig }}' -eq $false) {
          $args += '-X'
        }

        if ( '${{ inputs.pubkeys }}' ) {
          $pubkeys = '${{ inputs.pubkeys }}'
          $pubkey_list = $pubkeys.Split('', [System.StringSplitOptions]::RemoveEmptyEntries)
          $pubkey_list = $pubkey_list | % { $_.Trim() }
          foreach ($pubkey in $pubkey_list) {
            $args += '-K'
            $args += $pubkey
          }
        }

        if ($platform -eq 'x86') {
          $args += '--allow-unsupported-windows'
        }

        # because setup is a Windows GUI app, make it part of a pipeline to make
        # PowerShell wait for it to exit
        & C:\setup.exe $args | Out-Default
      shell: powershell

    - if: ${{ inputs.add-to-path  == 'true' }}
      run: echo "${{ inputs.install-dir }}\bin" >> $env:GITHUB_PATH
      shell: powershell

    - run: |
        # run login shell to copy skeleton profile files
        ${{ inputs.install-dir }}\bin\bash.exe --login
      shell: powershell

branding:
  color: green
  icon: terminal
